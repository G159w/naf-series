generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String()
  access_token      String? @db.String()
  expires_at        Int?
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String()
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id String @id @default(cuid())

  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id String @id @default(cuid())

  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts   Account[]
  sessions   Session[]
  comments   Comment[]
  ratings    Rating[]
  videoClubs VideoClub[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Personality {
  id String @id @default(cuid())

  name       String  @unique
  popularity Float
  imgUrl     String?

  created Video[] @relation("createdVideos")
  roles   Role[]
}

model Genre {
  id     String  @id @default(cuid())
  name   String  @unique
  videos Video[] @relation("videoGenres")
}

enum VideoType {
  Movie
  Series
}

model Video {
  id String @id @default(cuid())

  adult        Boolean
  posterPath   String?
  backdropPath String?

  title            String
  originalTitle    String
  originalLanguage String
  releaseDate      DateTime
  overview         String?
  voteAverage      Float
  voteCount        Int
  revenue          Float?
  status           String
  tagline          String?
  budget           Float?
  homepage         String?
  imdbId           String?
  movieDbId        String    @unique
  popularity       Float
  type             VideoType

  creators   Personality[] @relation("createdVideos")
  characters Role[]
  genres     Genre[]       @relation("videoGenres")

  comments   Comment[]
  ratings    Rating[]
  videoClubs VideoClub[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, releaseDate])
}

model Comment {
  id String @id @default(cuid())

  content String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  videoClub   VideoClub @relation(fields: [videoClubId], references: [id], onDelete: Cascade)
  videoClubId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id   String @id @default(cuid())
  note Int

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  user   User   @relation(fields: [userId], references: [id])
  userId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}

model Role {
  id        String @id @default(cuid())
  order     Int
  character String

  video   Video  @relation(fields: [videoId], references: [id])
  videoId String

  actor   Personality @relation(fields: [actorId], references: [id])
  actorId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([actorId, videoId, character])
}

model VideoClub {
  id   String @id @default(cuid())
  name String

  inviteId String @unique
  watchId  String @unique

  users    User[]
  comments Comment[]
  videos   Video[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
