generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["filteredRelationCount"]
}

datasource db {
  provider = "cockroachdb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String()
  access_token      String? @db.String()
  expires_at        Int?
  expires_in        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String()
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String              @id @default(cuid())
  name          String?
  email         String?             @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments      Comment[]
  ratings       Rating[]
  videosSeen    UserHaveSeenVideo[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Personality {
  id         String  @id @default(cuid())
  name       String  @unique
  popularity Float
  imgUrl     String?
  created    Video[] @relation("createdVideos")
  starred    Video[] @relation("starredVideos")
}

model Genre {
  id     String  @id @default(cuid())
  name   String  @unique
  videos Video[] @relation("videoGenres")
}

enum VideoType {
  Movie
  Series
}

model Video {
  id    String  @id @default(cuid())
  adult Boolean

  posterPath   String?
  backdropPath String?

  title            String
  originalTitle    String
  originalLanguage String
  releaseDate      DateTime
  overview         String?
  voteAverage      Float
  voteCount        Int
  revenue          Float?
  status           String
  tagline          String?
  budget           Float?
  homepage         String?
  imdbId           String?
  popularity       Float

  creators Personality[] @relation("createdVideos")
  actors   Personality[] @relation("starredVideos")
  genres   Genre[]       @relation("videoGenres")

  comments     Comment[]
  ratings      Rating[]
  usersHasSeen UserHaveSeenVideo[]
  type         VideoType

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([title, releaseDate])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  video     Video    @relation(fields: [videoId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Rating {
  id        String   @id @default(cuid())
  note      Int
  video     Video    @relation(fields: [videoId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}

model UserHaveSeenVideo {
  id        String   @id @default(cuid())
  hasSeen   Boolean
  video     Video    @relation(fields: [videoId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  videoId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, videoId])
}
